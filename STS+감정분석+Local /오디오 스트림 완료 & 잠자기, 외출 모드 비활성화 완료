import os
import io
import time
import pickle
import openai
import threading
import pyaudio
import numpy as np
import configparser
from konlpy import jvm
import tensorflow as tf
from Local import Local
from konlpy.tag import Komoran
from pydub import AudioSegment
from pydub.playback import play
from google.cloud import texttospeech
from google.cloud import speech_v1 as speech

# 환경변수 추가했으나 인식못해 직접 경로 설정
jvm_path = "C:\\Program Files\\Java\\jdk-22\\bin\\server\\jvm.dll"
jvm.init_jvm(jvm_path)

# os.chdir('C:/Users/user/ElderlyCareRobot')
os.environ["PATH"] += os.pathsep + "C:\\Users\\user\\ffmpeg-6.1.1-full_build\\bin"
#os.environ["PATH"] += os.pathsep +  "C:\\Users\\grpug\\ffmpeg\\bin"

class DetectEmotion:
    def __init__(self, model_path , label_encoder_path):
        model_path = 'C:\\Users\\user\\OneDrive\\emtion\\light_emotion_model'
        label_encoder_path = 'C:\\Users\\user\\OneDrive\\emtion\\label_encoder.pkl'
        self.model = tf.keras.models.load_model(model_path)
        with open(label_encoder_path, 'rb') as file:
            self.label_encoder = pickle.load(file)
        tf.keras.backend.set_floatx('float16')

    def predict(self, texts):
        vectorized_texts = self.model.layers[0](texts)
        predictions = self.model.predict(vectorized_texts, batch_size=1)
        predicted_classes = np.argmax(predictions, axis=1)
        predicted_emotions = self.label_encoder.inverse_transform(predicted_classes)
        return predicted_emotions

class SpeechToText:
    def __init__(self):
        #os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "C:\\Users\\user\\Json_key\\STT_key\\sigma-kayak-421806-2be227c3a876.json"
        os.environ[
            "GOOGLE_APPLICATION_CREDENTIALS"] = "C:\\Users\\user\\Json_key\\STT_key\\careful-hangar-423707-k6-43fb48a2baff.json"
        self.client = speech.SpeechClient()
        self.local = Local()
        self.tts = TextToSpeech()
        self.transcript = ""             # 곰돌아 빠진 음성 텍스트로 저장
        self.prompt = ""                 # 인식된 음성 감정에 맞게 프롬프트 텍스트 저장
        self.come_transcript = ""        # 인식된 음성 텍스트로 저장
        self.stream_use = False          # 오디오 스트림 사용 유무(기본 설정 = false)
        self.noise_level = 0             # 주변 소음 측정 (소음에 따라 마이크 음성 입력 강도 달라짐)
        self.komoran = Komoran(userdic='STS/word.txt')
        self.setup_audio_stream()
        self.last_input_time = time.time() #마지막 입력 시간 초기화
        self.sleeping = False

    def setup_audio_stream(self):
        start_time = time.time()
        if not self.stream_use:
            self.pyaudio_instance = pyaudio.PyAudio()
            self.stream = self.pyaudio_instance.open(
                format=pyaudio.paInt16,
                channels=1,
                rate=16000,
                input=True,
                frames_per_buffer=1024
            )
        end_time = time.time()
        self.stream_use = True
        print(f"오디오 스트림 설정 완료 시간: {end_time - start_time} 초")

    def restart_audio_stream(self):
        if self.stream.is_active():
            self.stream.stop_stream()
        self.stream.close()
        self.pyaudio_instance.terminate()
        self.stream_use = False
        print("오디오 스트림 중지")

    def measure_ambient_noise(self, duration=1.0):
        if self.stream.is_active():
            frames = []
            for _ in range(int(self.stream._rate / self.stream._frames_per_buffer * duration)):
                data = self.stream.read(self.stream._frames_per_buffer)
                frames.append(np.frombuffer(data, dtype=np.int16))
            frame = np.concatenate(frames)
            return np.max(np.abs(frame)) / 32767
        else:
            return 0

    def adjust_recognition_sensitivity(self, noise_level):
        if noise_level < 0.1:
            speech_contexts = [speech.SpeechContext(phrases=["주변이 조용합니다."])]
        elif noise_level < 0.3:
            speech_contexts = [speech.SpeechContext(phrases=["주변이 약간 시끄럽습니다."])]
        else:
            speech_contexts = [speech.SpeechContext(phrases=["주변이 시끄럽습니다."])]
        return speech_contexts

    def process_emergency(self, word):          #응급 상황
        if word == '살리':
            print('살려줘(긴급) 관련 동작')
        elif '아프' in word:
            print('아파(긴급) 관련 동작')
        elif '이상' in word:
            print('이상해(긴급) 관련 동작')

    def process_schedule(self, word, nouns):    # 스케줄(일정) 관련
        if word == '맞추':
            if '일정' in nouns:
                print('일정 맞춤 관련동작 실행')
        elif word == '알리':
            if '일정' in nouns:
                print('일정 알림 관련동작 실행')

    def process_alarm(self, word, nouns):       # 알람 관련
        if word == '맞추':
            if '알람' in nouns:
                print('알람 맞춤 관련동작 실행')
        elif word == '알리':
            if '알람' in nouns:
                print('알람 알림 관련동작 실행')

    def process_weather(self, word, nouns):     #날씨 관련
        if word == '알리':
            if '날씨' in nouns:
                if '오늘' in nouns:
                    print('오늘 날씨 출력')
                    self.local.fetchWeatherData()
                    self.local.printTodayWeather()
                elif '내일' in nouns:
                    print('내일 날씨 출력')
                else:
                    print('오늘 날씨 출력')
                    self.local.fetchWeatherData()
                    self.local.printTodayWeather()
        elif '날씨' in nouns:
            if '내일' in nouns:
                print('내일 날씨 출력')
            elif '오늘' in nouns:
                print('오늘 날씨 출력')
                self.local.fetchWeatherData()
                self.local.printTodayWeather()
            else:
                print('오늘 날씨 출력')
                self.local.fetchWeatherData()
                self.local.printTodayWeather()

    def process_command(self, transcript):
        pos_result = self.komoran.pos(transcript)

        nouns = [word for word, pos in pos_result if pos in ('NNG', 'NNP')]
        verbs = [word for word, pos in pos_result if pos in ('VV', 'VA')]

        verb_indices = [i for i, (word, pos) in enumerate(pos_result) if pos == 'VV' and word not in ['있']]
        last_verb_index = verb_indices[-1] if verb_indices else -1

        for i, (word, pos) in enumerate(pos_result):
            if i == last_verb_index:
                self.process_emergency(word)
                self.process_schedule(word, nouns)
                self.process_alarm(word, nouns)
                self.process_weather(word, nouns)
                break
        else:
            self.process_emergency(verbs)
            self.process_weather(None, nouns)

    def transcribe_streaming(self):
        while True:
            print("음성 인식을 시작합니다. (텍스트로 변환 중)")
            if not self.stream_use:
                self.setup_audio_stream()

            if self.stream is not None and self.stream.is_active() and not self.tts.is_speaking:
                noise_level = self.measure_ambient_noise()
                speech_contexts = self.adjust_recognition_sensitivity(noise_level)

                if noise_level < 0.1:
                    self.stream.input_volume_float = 1.0
                elif noise_level < 0.3:
                    self.stream.input_volume_float = 0.7
                else:
                    self.stream.input_volume_float = 0.4

                config = speech.RecognitionConfig(
                    encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
                    sample_rate_hertz=16000,
                    language_code="ko-KR",
                    metadata=speech.RecognitionMetadata(
                        interaction_type=speech.RecognitionMetadata.InteractionType.VOICE_SEARCH,
                        microphone_distance=speech.RecognitionMetadata.MicrophoneDistance.NEARFIELD,
                        original_media_type=speech.RecognitionMetadata.OriginalMediaType.AUDIO,
                        recording_device_type=speech.RecognitionMetadata.RecordingDeviceType.SMARTPHONE,
                    ),
                    speech_contexts=speech_contexts
                )

                streaming_config = speech.StreamingRecognitionConfig(config=config, interim_results=True)

                def generate_requests():
                    start_time = time.time()
                    while time.time() - start_time < 300:
                        data = self.stream.read(1024, exception_on_overflow=False)
                        #print(f"데이터 읽기 시간: {time.time()}, 데이터 존재 여부: {bool(data)}")
                        yield speech.StreamingRecognizeRequest(audio_content=data)

                requests = generate_requests()
                responses = self.client.streaming_recognize(streaming_config, requests)

                for response in responses:
                    if not response.results:
                        continue

                    result = response.results[-1]

                    if result.is_final:
                        transcript = result.alternatives[0].transcript
                        self.last_input_time = time.time()
                        print(f"마지막 입력 시간 갱신: {self.last_input_time}")

                        if "잘게" in transcript or "외출 다녀올게" in transcript:
                            self.sleeping = True
                            print("모드 비활성화")
                            return None
                        elif "일어났어" in transcript or "다녀왔어" in transcript:
                            self.sleeping = False
                            print("모드 활성화, 다시 정상작동 시작합니다.")
                            return None

                        if self.sleeping:
                            print("모드 비활성화 중입니다. GPT 요청을 건너뜁니다.")
                            return None

                        command_result = self.process_command(transcript)

                        if command_result:
                            print(f"로컬 처리 결과: {transcript}")
                            return
                        else:
                            if "곰돌아" in transcript or "공돌아" in transcript or "곤도라" in transcript or "곰도라" in transcript or "곰돌 아" in transcript:
                                self.come_transcript = transcript
                                print(f"들어온 질문: {self.come_transcript}")
                                clean_transcript = transcript.replace("곰돌아", "").replace("공돌아", "").replace("곤도라",
                                                                                                            "").replace(
                                    "곰도라", "").replace("곰돌 아", "").strip()
                                self.transcript = clean_transcript
                                return self.transcript
                            else:
                                print(f"무시된 음성 입력: {transcript}")

                print(f"스트림 마지막 음성 입력 : {self.last_input_time}")
                print(f"스트림 현재 시간 : {time.time()}")

                if time.time() - self.last_input_time > 300:
                    print(f"5분 동안 말이 없어 재시작합니다. 경과 시간: {time.time() - self.last_input_time}초")
                    self.restart_audio_stream()
                    time.sleep(0.25)
                    self.pyaudio_instance.terminate()
                    time.sleep(0.15)
                    self.setup_audio_stream()
                    self.last_input_time = time.time()
                    print(f"오디오 스트림 재시작 시간: {self.last_input_time}")

            if not self.stream.is_active() or self.tts.is_speaking:
                print("음성 인식이 중단되었습니다.")
                time.sleep(0.15)

class GPTResponse:
    def __init__(self):
        self.history = []
        self.local = Local()
        self.last_transcript_time = time.time()
        self.alone_last_transcript_time = time.time()
        self.silence_threshold = 10
        self.alone = 20
        self.response_timer = None
        self.silence_timer = None
        self.de = DetectEmotion('light_emotion_model210', 'label_encoder.pkl')

    def get_gpt_response(self, text):
        messages = [{"role": "system", "content": "일상 대화"}]
        for question, answer in self.history:
            messages.append({"role": "user", "content": question})
            messages.append({"role": "assistant", "content": answer})
        messages.append({"role": "user", "content": text})

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=150,
                n=1,
                stop=None,
                temperature=0.7,
            )
            return response.choices[0].message["content"].strip()
        except Exception as e:
            return f"An error occurred: {str(e)}"

    def emotion_detection(self, transcript):
        emotions = self.de.predict([transcript])
        return emotions[0]

    def process_response(self, transcript):
        emotion = self.emotion_detection(transcript)
        print(f"감지된 감정: {emotion}")

        if 'angry' in emotion or '분노' in emotion:
            prompt = f"사용자가 화났습니다. 사용자의 질문: {transcript}\n 에 대한 사용자의 마음을 진정시키고 합리적인 답변을 해주세요."
        elif 'disgust' in emotion:
            prompt = f"사용자가 역겨움을 느끼고 있습니다. 사용자의 질문: {transcript}\n이에 대한 이해하고 수용하는 태도로 답변을 해주세요."
        elif 'fear' in emotion or '불안' in emotion:
            prompt = f"사용자가 불안함 느끼고 있습니다. 사용자의 질문: {transcript}\n이에 대한 안정적이고 위로가 되는 답변을 해주세요."
        elif 'happiness' in emotion or '기쁨' in emotion:
            prompt = f"사용자가 기쁨을 느끼고 있습니다. 사용자의 질문: {transcript}\n이에 대한 밝고 긍정적인 답변을 해주세요."
        elif 'neutral' in emotion or '무감정' in emotion:
            prompt = f"사용자의 질문: {transcript}\n이에 대한  명확하고 객관적인 답변을 해주세요."
        elif 'sadness' in emotion or '슬픔' in emotion or '상처' in emotion:
            prompt = f"사용자가 상처받고, 슬퍼하고 있습니다. 사용자의 질문: {transcript}\n이에 대한 위로의 답변을 해주세요."
        elif 'surprise' in emotion or '당황' in emotion:
            prompt = f"사용자가 당황하고 있습니다. 사용자의 질문: {transcript}\n이에 대한 안정감을 주고 상황을 명확히 해주는 답변을 해주세요."
        else:
            prompt = f"사용자의 질문: {transcript}\n 이에 대한 답변을 해주세요."
        print(f"프롬프트: {prompt} ")

        gpt_response = self.get_gpt_response(prompt)
        print("GPT 응답: {}".format(gpt_response))
        self.history.append((transcript, gpt_response))
        self.last_transcript_time = time.time()
        self.alone_last_transcript_time = time.time()
        return gpt_response

    def start_response_timer(self):
        if self.response_timer is not None:
            self.response_timer.cancel()
        self.response_timer = threading.Timer(self.alone, self.check_alone)
        self.response_timer.start()

    def start_silence_timer(self):
        if self.silence_timer is not None:
            self.silence_timer.cancel()
        self.silence_timer = threading.Timer(self.silence_threshold, self.reset_memory)
        self.silence_timer.start()

    def reset_memory(self):
        if time.time() - self.last_transcript_time > self.silence_threshold:
            print(f"{self.silence_threshold}초 이상 대화 없어 메모리 초기화합니다.")
            self.history.clear()
            self.last_transcript_time = time.time()

    def check_alone(self):
        if time.time() - self.alone_last_transcript_time > self.alone:
            print("혼자 뭐하세요?")
            self.alone_last_transcript_time = time.time()  # 현재 시간으로 갱신
            self.start_response_timer()

class TextToSpeech:
    def __init__(self):
        self.is_speaking = False

    def text_to_speech(self, text):
        self.is_speaking = True
        stt = SpeechToText()
        stt.restart_audio_stream()
        while stt.stream_use:
            time.sleep(0.1)
        #os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "C:\\Users\\wwsgb\\Json_key\\tts_json_key\\sigma-kayak-421806-c28bf22ca0f0.json"
        #os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/home/pi/ElderlyCareRobot/json/sigma-kayak-421806-c28bf22ca0f0.json"
        os.environ[
            "GOOGLE_APPLICATION_CREDENTIALS"] = "C:\\Users\\user\\Json_key\\TTS_key\\careful-hangar-423707-k6-f3a7f26801af.json"

        tts_client = texttospeech.TextToSpeechClient()
        synthesis_input = texttospeech.SynthesisInput(text=text)
        voice = texttospeech.VoiceSelectionParams(
            language_code="ko-KR",
            ssml_gender=texttospeech.SsmlVoiceGender.NEUTRAL
        )
        audio_config = texttospeech.AudioConfig(audio_encoding=texttospeech.AudioEncoding.MP3)

        response = tts_client.synthesize_speech(input=synthesis_input, voice=voice, audio_config=audio_config)
        audio = io.BytesIO(response.audio_content)
        song = AudioSegment.from_mp3(audio)
        play(song)
        time.sleep(0.2)
        stt.setup_audio_stream()
        self.is_speaking = False

def main():
    stt = SpeechToText()
    gpt = GPTResponse()
    tts = TextToSpeech()

    stt_thread = threading.Thread(target=transcribe_streaming, args=(stt, gpt, tts))
    gpt_thread = threading.Thread(target=process_gpt, args=(gpt,))

    while True:
        transcript = stt.transcribe_streaming()
        if transcript is not None:
            gpt_response = gpt.process_response(transcript)
            gpt.start_silence_timer()
            gpt.start_response_timer()
            tts.text_to_speech(gpt_response)
        time.sleep(1)

def test():

    tts = TextToSpeech()
    tts.text_to_speech("안녕하세요")

if __name__ == "__main__":
    main()
